{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-30T16:25:09.111Z",
    "end": "2024-05-30T16:25:09.353Z",
    "duration": 242,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d1db4c9a-1fa0-4d8d-b39a-4f519e1785d1",
      "title": "",
      "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\Test_Verktyg_Assignment_1\\tests\\unit\\users.test.js",
      "file": "\\tests\\unit\\users.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8197b283-5223-4839-b5fd-fd4c82d0cf97",
          "title": "Logic unit tests",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\Test_Verktyg_Assignment_1\\tests\\unit\\users.test.js",
          "file": "\\tests\\unit\\users.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Logic unit tests\"",
              "fullTitle": "Logic unit tests \"before each\" hook in \"Logic unit tests\"",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    connection = await mysql.createConnection({\n        user: \"root\",\n        password: \"admin123!\",\n        host: \"localhost\",\n        database: \"users\",\n    });\n    console.log(\"Connected to database\");\n} catch (error) {\n    console.error(\"Something went wrong with connecting to db\", error);\n}\nawait connection.query(\"DROP TABLE IF EXISTS users\");\nawait connection.query(`CREATE TABLE users (\n    ID int AUTO_INCREMENT PRIMARY KEY,\n    fname VARCHAR(255) NOT NULL,\n    lname VARCHAR(255) NOT NULL,\n    uname VARCHAR(255) NOT NULL,\n    age int NOT NULL,\n    bio VARCHAR(600) NOT NULL\n)`);\nawait connection.query(`INSERT INTO users (fname, lname, uname, age, bio) VALUES \n    (\"Jack\", \"Daniels\", \"jackie\", 65, \"Smooth\")`);",
              "err": {},
              "uuid": "b6c7a8c2-408c-4cc1-a6ac-4a431e519beb",
              "parentUUID": "8197b283-5223-4839-b5fd-fd4c82d0cf97",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Logic unit tests\"",
              "fullTitle": "Logic unit tests \"after each\" hook in \"Logic unit tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await connection.query(\"DELETE FROM users\");\nawait connection.end();",
              "err": {},
              "uuid": "0a2632b5-918e-4e16-b67c-ee90b5bdd9b1",
              "parentUUID": "8197b283-5223-4839-b5fd-fd4c82d0cf97",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return all users from db",
              "fullTitle": "Logic unit tests should return all users from db",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = await logic.getUsersFromDB(connection)\nassert(users.length > 0, true, \"The users array should at least contain one entry\");",
              "err": {},
              "uuid": "46805ab0-fe1b-4666-b534-98cea4a3f8db",
              "parentUUID": "8197b283-5223-4839-b5fd-fd4c82d0cf97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return user with specified ID",
              "fullTitle": "Logic unit tests should return user with specified ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = 1;\nconst user = await logic.getUserFromDbByID(connection, userId);\nassert(user.length > 0, true, \"Should return an object containing the specified user\");",
              "err": {},
              "uuid": "c9e6d736-bc7b-4683-9917-3061a9c65a98",
              "parentUUID": "8197b283-5223-4839-b5fd-fd4c82d0cf97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return updated user info",
              "fullTitle": "Logic unit tests should return updated user info",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = 1;\nconst user = {\n    fname: \"Jill\",\n    lname: \"Smith\",\n    uname: \"jilly\",\n    age: 30,\n    bio: \"Lorem ipsum\"\n};\nconst editUser = await logic.updateUserInDb(connection, user.fname, user.lname, user.uname, user.age, user.bio, userId);\nassert(editUser.affectedRows, 1);",
              "err": {},
              "uuid": "e98d1d28-5c60-46de-a044-eef93eca4a91",
              "parentUUID": "8197b283-5223-4839-b5fd-fd4c82d0cf97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create user in DB",
              "fullTitle": "Logic unit tests should create user in DB",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createUser = {fname: \"Jill\",\n                    lname: \"Smith\",\n                    uname: \"Jilly\",\n                    age: 30,\n                    bio: \"Lorem ipsum\"\n};\nconst newUser = await logic.createUserInDB(connection, createUser.fname, createUser.lname, createUser.uname, createUser.age, createUser.bio);\nassert(newUser.affectedRows, 1);",
              "err": {},
              "uuid": "2ec7919b-55bc-4bbd-8ec7-705aa522c1f9",
              "parentUUID": "8197b283-5223-4839-b5fd-fd4c82d0cf97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete user in DB",
              "fullTitle": "Logic unit tests should delete user in DB",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userID = 1;\nconst deletedUSer = await logic.deleteUserFromDB(connection, userID);\nassert(deletedUSer.affectedRows, 1);",
              "err": {},
              "uuid": "fef070d5-7aeb-4f4c-9aff-3a9e7a53ba83",
              "parentUUID": "8197b283-5223-4839-b5fd-fd4c82d0cf97",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "46805ab0-fe1b-4666-b534-98cea4a3f8db",
            "c9e6d736-bc7b-4683-9917-3061a9c65a98",
            "e98d1d28-5c60-46de-a044-eef93eca4a91",
            "2ec7919b-55bc-4bbd-8ec7-705aa522c1f9",
            "fef070d5-7aeb-4f4c-9aff-3a9e7a53ba83"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}